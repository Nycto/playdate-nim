import unittest, playdate/api, strutils

template assertNineSlice(nineSlice: NineSlice, width, height: int, expect: openarray[string], setMask: bool = true) =
    var img = playdate.graphics.newBitmap(width, height, kColorWhite)
    if setMask:
        discard img.setBitmapMask()
    img.draw(nineSlice)
    let expectImg = "\n" & expect.join("\n") & "\n"
    check(("\n" & $img) == expectImg)

proc execNineSliceTests*(runnable: bool) =

    suite "Nine Slice API":
        if runnable:

            let nineSlice9x9 = playdate.graphics.newBitmap("nineslice_9x9.png").newNineSlice()

            test "Draw a nine slice to bitmap when the target area is larger than the nine slice":
                nineSlice9x9.assertNineSlice(24, 12, [
                    "███░░░░░░░░░░░░░░░░░░███",
                    "█░░ █  █  █  █  █  █ ░░█",
                    "█░                    ░█",
                    "░  ░█░░█░░█░░█░░█░░█░  ░",
                    "░█ █ ██ ██ ██ ██ ██ █ █░",
                    "░  ░█░░█░░█░░█░░█░░█░  ░",
                    "░  ░█░░█░░█░░█░░█░░█░  ░",
                    "░█ █ ██ ██ ██ ██ ██ █ █░",
                    "░  ░█░░█░░█░░█░░█░░█░  ░",
                    "█░                    ░█",
                    "█░░ █  █  █  █  █  █ ░░█",
                    "███░░░░░░░░░░░░░░░░░░███",
                ])

            test "Drawing a nine slice to an image is smaller than it should be":
                nineSlice9x9.assertNineSlice(6, 6, [
                    "██████",
                    "█░░░░█",
                    "█░  ░█",
                    "█░  ░█",
                    "█░░░░█",
                    "██████",
                ])

            test "Draw a nine slice to an image without a mask":
                nineSlice9x9.assertNineSlice(9, 9, [
                    "███░░░███",
                    "█░░███░░█",
                    "█░█████░█",
                    "░██░█░██░",
                    "░███████░",
                    "░██░█░██░",
                    "█░█████░█",
                    "█░░███░░█",
                    "███░░░███",
                ], setMask = false)

            let nineSlice6x6 = playdate.graphics.newBitmap("nineslice_6x6.png").newNineSlice()
            for width in 4..30:
                test "Drawing a nine slice on an image of width " & $width:
                    let row = "██" & repeat("░", width - 4) & "██"
                    nineSlice6x6.assertNineSlice(width, 7, [ row, row, row, row, row, row, row, ])

            let nineSlice27x3 = playdate.graphics.newBitmap("nineslice_27x3.png").newNineSlice()
            for width in 18..30:
                test "Drawing a multi-byte nine slice on an image of width " & $width:
                    let row = repeat("█", 9) & repeat("░", width - 18) & repeat("█", 9)
                    nineSlice27x3.assertNineSlice(width, 3, [ row, row, row, ])

            test "Drawing a large nine slice":
                playdate.graphics.newBitmap("nineslice_60x60.png").newNineSlice().assertNineSlice(70, 50, [
                    "████████████████████                              ████████████████████",
                    "████████████████████                              ████████████████████",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██████████████████████████████████░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██████████████████████████████████░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██████████████████████████████████░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░██",
                    "████████████████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░████████████████████",
                    "████████████████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░████████████████████",
                    "          ███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███          ",
                    "          ███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███          ",
                    "          ███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███          ",
                    "          ███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███          ",
                    "          ███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███          ",
                    "          ███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███          ",
                    "          ███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███          ",
                    "          ███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███          ",
                    "          ███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███          ",
                    "          ███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███          ",
                    "████████████████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░████████████████████",
                    "████████████████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░████████████████████",
                    "██░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██████████████████████████████████░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██████████████████████████████████░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██████████████████████████████████░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "██░░░░░░░░░░░░░░░░██                              ██░░░░░░░░░░░░░░░░██",
                    "████████████████████                              ████████████████████",
                    "████████████████████                              ████████████████████",
                ])

when isMainModule:
    execNineSliceTests(runnable = false)
